@startuml GomokuNarabe
class MainPage
{
    + MainPage(vm : GomokuNarabeViewModel)
}

class GomokuNarabeViewModel
{
    + CoinSize : double <<Observable>>
    + FieldWidth : double <<Observable>>
    + FieldHeight : double <<Observable>>
    + FieldColumns : double <<Observable>>
    + Lanes : ObservableCollection<Lane> 
    + NextCoin : Coin <<Observable>>
    ' - fieldLanes : int
    ' - fieldStacks : int
    - gomokuNarabe : GomokuNarabe 
    + GomokuNarabeViewModel()
    + SetFieldSize(fieldLanes : int, fieldStacks : int) : GomokuNarabeViewModel
    - PageSizeChanged(pageSize : Size) : void <<RelayCommand>>
    - SummonCoin(laneIndex : int) : Task <<RelayCommand>>
    - ResetGame() : Task <<RelayCommand>>
}

class GomokuNarabe
{
    ~ NextCoin : Coin
    - lanes : int <<read only>>
    - stacks : int <<read only>>
    ~ Lanes : List<Lane>
    + GomokuNarabe(lanes : int, stacks : int, firstCoin : Coin)
    - PushAt(laneIndex : int) : void
    + TryPushAt(laneIndex : int) : bool
    + Reset() : void
}

enum Coin
{
    NullCoin
    RedCoin
    YellowCoin
    {static} + Next(coin : this Coin) : Coin
}

class Lane
{
    + LaneIndex : int
    + CanStack : bool
    - stacks : int
    + StackedCoins : List<Coin>
    + CurrentPosition : int
    + Lane(laneIndex : int, stacks : int)
    + StackCoin(coin : Coin) : void
    + Reset() : void
}

' 
MainPage ..> GomokuNarabeViewModel : <use>
GomokuNarabeViewModel --> GomokuNarabe

GomokuNarabe *- Lane

@enduml

@startuml SequenceDiagram

boundary LaneSelector
control ViewModel
collections CoinPool

group Initialize

Activate CoinPool
Activate GameField
CoinPool -> ViewModel : Initializing (Message)
GameField -> ViewModel : Initializing (Message)
CoinPool -> CoinPool : FillPool
CoinPool --> ViewModel : Initialized (Message)
Deactivate CoinPool
GameField --> ViewModel : Initialized (Message)
Deactivate GameField
ViewModel -> LaneSelector : Visible = true (Message)

end

group Coin insertion
LaneSelector -> ViewModel : SummonCoin (ICommand)
activate LaneSelector

alt success case
ViewModel -> LaneSelector : Visible = false (Message)
ViewModel -> CoinPool : PopCoin Request (Message)
Activate CoinPool
CoinPool --> ViewModel : Coin (Image)
Deactivate CoinPool
ViewModel -> GameField : InsertCoin Request (Message)
Activate GameField
GameField --> ViewModel : success (bool)
Deactivate GameField
opt Lane stack is full
ViewModel -> LaneSelector : Enable = false (Message)\nfor TargetLane
end
ViewModel -> LaneSelector : Visible = true (Message)
end

deactivate LaneSelector
end

group Game reset
GameField -> ViewModel : ResetGame (ICommand)
ViewModel -> LaneSelector : Visible = false (Message)
ViewModel -> GameField : ClearField Request (Message)
Activate GameField
ViewModel --> ViewModel : Delay
ViewModel -> CoinPool : FillPool Request (Message)
Activate CoinPool
GameField --> ViewModel : success (bool)
Deactivate GameField
CoinPool --> ViewModel : success (bool)
Deactivate CoinPool
ViewModel -> LaneSelector : Enable = true (Message)
ViewModel -> LaneSelector : Visible = true (Message)
end

@enduml

@startuml AppState

hide empty description

state Initial {
    state "InputDisabled" as Initial.InputDisabled
    state "InputEnabled" as Initial.InputEnabled
    [*] -> Initial.InputDisabled
    Initial.InputDisabled --> Initial.InputEnabled : Recieved initialized messages 
    Initial.InputEnabled -> [*]
}

state OnGame {
    state "InputDisabled" as OnGame.InputDisabled
    state "InputEnabled" as OnGame.InputEnabled
    [*] -> OnGame.InputEnabled
    OnGame.InputEnabled --> OnGame.InputDisabled : SummonCoin begin
    OnGame.InputDisabled --> OnGame.InputEnabled : SummonCoin end
}

[*] -> Initial : On entry initialization
Initial -> OnGame
OnGame -> OnGame : Reset

@enduml