@startuml GomokuNarabe
class MainPage
{
    + MainPage(vm : GomokuNarabeViewModel)
}

class GomokuNarabeViewModel
{
    + CoinSize : double <<Observable>>
    + FieldWidth : double <<Observable>>
    + FieldHeight : double <<Observable>>
    + FieldColumns : double <<Observable>>
    + Lanes : ObservableCollection<Lane> 
    + NextCoin : Coin <<Observable>>
    - gomokuNarabe : GomokuNarabe 
    + GomokuNarabeViewModel()
    + SetFieldSize(fieldLanes : int, fieldStacks : int) : GomokuNarabeViewModel
    - PageSizeChanged(pageSize : Size) : void <<RelayCommand>>
    - SummonCoin(laneIndex : int) : void <<RelayCommand>>
    - ResetGame() : void <<RelayCommand>>
}

class GomokuNarabe
{
    ~ NextCoin : Coin
    - lanes : int
    - stacks : int
    ~ Lanes : List<Lane>
    + GomokuNarabe(lanes : int, stacks : int, firstCoin : Coin)
    - PushAt(laneIndex : int) : void
    + TryPushAt(laneIndex : int) : bool
    + Reset() : void
}

enum Coin
{
    RedCoin
    YellowCoin
    {static} + Next(coin : this Coin) : Coin
}

class Lane
{
    + LaneIndex : int
    - stacks : int
    + CanStack : bool
    + StackedCoins : List<Coin>
    + CurrentPosition : int
    + Lane(laneIndex : int, stacks : int)
    + StackCoin(coin : Coin) : void
    + Reset() : void
}

' 
MainPage ..> GomokuNarabeViewModel : <use>
GomokuNarabeViewModel --> GomokuNarabe

@enduml

@startuml SequenceDiagram

boundary LaneSelector
control ViewModel


group Initialize
ViewModel -> CoinPool : FillPool (Message)
end

group Coin insertion
LaneSelector -> ViewModel : SummonCoin (ICommand)
ViewModel -> CoinPool : PopCoin Request (Message)
CoinPool -> ViewModel : Coin (Image)
ViewModel -> GameField : InsertCoin (Message)
opt Lane stack is full
ViewModel -> LaneSelector : DisableLane (Message)
end
end

group Game reset
GameField -> ViewModel : ResetGame (ICommand)
'ViewModel -> Model : Reset (Method)
ViewModel -> GameField : ClearField (Message)
'ViewModel -> GameField : Reset (Message)
'ViewModel -> CoinPool : Reset (Message)
end

@enduml

@startuml AppState

hide empty description
[*] -> Initial : On entry initialization
Initial -> OnGame : Enable gesture recognizer
OnGame --> Final : Disable gesture recognizer
Final --> Initial : Clean game field, \n(Re)Fill coin pool

@enduml